<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Collections.Generic" #>
<#+ 

public CodeType GetClassType(string fileName)
	{

		IServiceProvider hostServiceProvider = (IServiceProvider)Host;
	   
		if (hostServiceProvider == null)
				throw new Exception("Host property returned unexpected value (null)");
	   
		EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
	   
		if (dte == null)
				throw new Exception("Unable to retrieve EnvDTE.DTE");  
	

		if(string.IsNullOrWhiteSpace(fileName))
			throw new ArgumentNullException($"Invalid {fileName} argument");

		ProjectItem projectItem = dte.Solution.FindProjectItem(fileName);
		if (projectItem != null && (projectItem as CodeType != null))
			return projectItem as CodeType;
		
		foreach(Project project in dte.Solution.Projects)
		{
			if(project.ProjectItems != null)
			{
				var item = FindProjItem(project.ProjectItems, fileName);
				if(item != null && item.Name.Equals(fileName))
				{
					return GetType(item.FileCodeModel.CodeElements) as CodeType;
				}
			}
		}

		return null;
	}

private ProjectItem FindProjItem(ProjectItems projectItems, string fileName)
	{
		
		foreach(EnvDTE.ProjectItem projectItem in projectItems)
		{
			WriteLine(projectItem.Name);
			if(projectItem.Name.Equals(fileName))
				return projectItem;
			
			if(projectItem.ProjectItems != null)
			{
				var item = FindProjItem(projectItem.ProjectItems, fileName);
				if(item != null && item.Name.Equals(fileName))
					return item;
			}

			if(projectItem.SubProject != null)
			{
				var item = FindProjItem(projectItem.SubProject.ProjectItems, fileName);
				if(item != null && item.Name.Equals(fileName))
					return item;
			}
		}
		
		return null;
	}

private CodeType GetType(CodeElements elements)
{
	foreach (CodeElement element in elements)
	{
		var codeType= element as CodeType;
	   
		if (codeType!= null)
			return codeType;
   
		codeType= GetType(element.Children);
   
		if (codeType != null)
			return codeType;
	}
   
	return null;
}
#>

